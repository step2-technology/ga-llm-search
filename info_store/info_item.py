# File: info_store/info_item.py

"""
InfoItem
--------
Represents a single high-quality search result generated by a GA-LLM gene.
Used for downstream filtering, extraction, packaging.
"""

import uuid
from typing import Dict, Optional

class InfoItem:
    def __init__(
        self,
        dimension: str,
        title: str,
        snippet: str,
        url: str,
        query: str,
        keywords: Dict[str, str],
        score: float,
        user_query: str,
        full_text: Optional[str] = None,
        structured_data: Optional[dict] = None,
        metadata: Optional[dict] = None
    ):
        """
        Args:
            dimension (str): Semantic dimension the item belongs to.
            title (str): Title of the search result.
            snippet (str): Snippet from the result.
            url (str): URL of the source.
            query (str): Search query string used to generate this.
            keywords (dict): Mapping of dimension â†’ keyword used.
            score (float): LLM evaluation score.
            user_query (str): Original user query that triggered generation.
            full_text (str, optional): Raw crawled content.
            structured_data (dict, optional): Extracted JSON from full text.
            metadata (dict, optional): Additional metadata like timestamp, model name, etc.
        """
        self.id = str(uuid.uuid4())
        self.dimension = dimension
        self.title = title
        self.snippet = snippet
        self.url = url
        self.query = query
        self.keywords = keywords
        self.score = score
        self.user_query = user_query
        self.full_text = full_text or None
        self.structured_data = structured_data or None
        self.metadata = metadata or {}

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "dimension": self.dimension,
            "title": self.title,
            "snippet": self.snippet,
            "url": self.url,
            "query": self.query,
            "keywords": self.keywords,
            "score": self.score,
            "user_query": self.user_query,
            "full_text": self.full_text,
            "structured_data": self.structured_data,
            "metadata": self.metadata,
        }
