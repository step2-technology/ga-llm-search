# File: search_query/dimension_registry.py

"""
Dimension Registry
------------------
Tracks all semantic dimensions dynamically generated by LLM during search gene initialization.

Maintains an in-memory dictionary for registration, usage tracking, and inspection.
"""

# Global registry for dimensions
dimension_registry = {}

def register_dimension(dimension_name: str):
    """
    Register a new dimension name if not already seen.

    Args:
        dimension_name (str): The semantic dimension label to register.
    """
    if dimension_name not in dimension_registry:
        dimension_registry[dimension_name] = {
            "status": "new",
            "used_in_items": 0
        }

def mark_used(dimension_name: str):
    """
    Mark a dimension as used in downstream modules (e.g., InfoItem creation).

    Args:
        dimension_name (str): Dimension name to mark.
    """
    if dimension_name in dimension_registry:
        dimension_registry[dimension_name]["used_in_items"] += 1

def list_all_dimensions():
    """
    Returns:
        List[str]: All registered dimension names.
    """
    return list(dimension_registry.keys())

def print_registry():
    """
    Print current registry contents (for debugging).
    """
    print("\nðŸ“š Registered Dimensions:")
    for dim, meta in dimension_registry.items():
        print(f"- {dim} â†’ used {meta['used_in_items']} times")

def reset_registry():
    """
    Clears all registry data. Mostly for test/debug use.
    """
    global dimension_registry
    dimension_registry = {}
